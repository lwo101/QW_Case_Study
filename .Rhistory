plot <- ggplot(data = logistikverzug_mutated_df, mapping = aes(x = Produktionsdatum, y = Lieferzeit), col = Werksnummer) +
geom_point()
plot
plot <- ggplot(data = logistikverzug_mutated_df, mapping = aes(x = X, y = Lieferzeit), col = Werksnummer) +
geom_point()
plot
plot <- ggplot(data = logistikverzug_mutated_df, mapping = aes(x = Werksnummer, y = Lieferzeit), col = Werksnummer) +
geom_point(alpha = 0.6)
plot
model <- lm(Lieferzeit ~ Produktionsdatum, data = logistikverzug_mutated_df)
# Testplot
plot(logistikverzug_mutated_df$Produktionsdatum, logistikverzug_mutated_df$Lieferzeit, col = as.factor(logistikverzug_mutated_df$Werksnummer))
# Testplot
plot(logistikverzug_mutated_df$Produktionsdatum, logistikverzug_mutated_df$Lieferzeit, col = as.factor(logistikverzug_mutated_df$Herstellernummer))
abline(model, lty = 2)
model <- lm(Lieferzeit ~ Produktionsdatum, data = logistikverzug_mutated_df)
abline(model, lty = 2)
plot(logistikverzug_mutated_df$Produktionsdatum, logistikverzug_mutated_df$Lieferzeit, col = as.factor(logistikverzug_mutated_df$Herstellernummer))
abline(model, lty = 2)
model <- lm(Lieferzeit ~ IDNummer, data = logistikverzug_mutated_df)
# Testplot
plot(logistikverzug_mutated_df$IDNummer, logistikverzug_mutated_df$Lieferzeit, col = as.factor(logistikverzug_mutated_df$Herstellernummer))
abline(model, lty = 2)
View(logistikverzug_mutated_df)
logistikverzug_separated_df <- separate(logistikverzug_mutated_df, col=IDNummer, into = c("a", "b", "c", "d"), sep = "-")
logistikverzug_transformed_df <- transform(logistikverzug_separated_df, a = as.numeric(a), b = as.numeric(b),c = as.numeric(c),d = as.numeric(d))
head(logistikverzug_transformed_df)
logistikverzug_separated_df <- separate(logistikverzug_mutated_df, col=IDNummer, into = c("a", "b", "c", "d"), sep = "-")
logistikverzug_transformed_df <- transform(logistikverzug_separated_df, b = as.numeric(b),c = as.numeric(c),d = as.numeric(d))
head(logistikverzug_transformed_df)
tail(logistikverzug_transformed_df)
logistikverzug_separated_df <- separate(logistikverzug_mutated_df, col=IDNummer, into = c("ID_1", "ID_2", "ID_3", "ID_4"), sep = "-")
logistikverzug_transformed_df <- transform(logistikverzug_separated_df, ID_2 = as.numeric(ID_2),ID_3 = as.numeric(ID_3), ID_4 = as.numeric(ID_4))
head(logistikverzug_transformed_df)
model <- lm(Lieferzeit ~ ID_4, data = logistikverzug_transformed_df)
# Testplot
plot(logistikverzug_transformed_df$ID_4, logistikverzug_transformed_df$Lieferzeit, col = as.factor(logistikverzug_ttransformed_df$Herstellernummer))
abline(model, lty = 2)
model <- lm(Lieferzeit ~ ID_4, data = logistikverzug_transformed_df)
# Testplot
plot(logistikverzug_transformed_df$ID_4, logistikverzug_transformed_df$Lieferzeit, col = as.factor(logistikverzug_transformed_df$Herstellernummer))
abline(model, lty = 2)
# Testplot
hist(logistikverzug_transformed_df$Lieferzeit)
ggplot(logistikverzug_transformed_df, aes(x = Lieferzeit)) +
geom_histogram()
ggplot(logistikverzug_transformed_df, aes(x = Lieferzeit)) +
geom_histogram(binwidth = 1)
ggplot(logistikverzug_transformed_df, aes(x = Lieferzeit)) +
geom_histogram(binwidth = 1, aes(y = ..density..)))
ggplot(logistikverzug_transformed_df, aes(x = Lieferzeit)) +
geom_histogram(binwidth = 1, aes(y = ..density..))
library(tidyverse)
# einlesen der Datei Komponente_K7
komponente_k7 <- read.csv2("Komponente_K7.csv", header = TRUE, stringsAsFactors = FALSE)
# einlesen der Datei Logistikverzug_K7
logistikverzug_k7 <- read.csv2("Logistikverzug_K7.csv", header = TRUE, stringsAsFactors = FALSE)
# zusammenfügen der beiden Datensätze
logistikverzug_combined_df <- left_join(komponente_k7, logistikverzug_k7, by = "IDNummer")
str(logistikverzug_combined_df)
nrow(logistikverzug_combined_df)
# mit dem Befehl str() können wir einen Überblick über den gejointen Datensatz erhalten
str(logistikverzug_combined_df)
# der so gejointe Datensatz enthält 11 Merkmale (Spalten) mit 306490 Zeilen (observations)
# löschen der doppelten Spalten
logistikverzug_selected_df <-  select(logistikverzug_combined_df, 1:6, 8)
# umbenennen der Spalten
column_names <- c( "X","IDNummer", "Produktionsdatum", "Herstellernummer","Werksnummer", "Fehlerhaft", "Wareneingang")
names(logistikverzug_selected_df) <- column_names
# umwandeln der Spalten "Produktionsdatum" und "Wareneingang" in POSIXct (Format für Datumsangaben)
logistikverzug_selected_df$Produktionsdatum <- as.POSIXct(logistikverzug_selected_df$Produktionsdatum, "", "%Y-%m-%d")
logistikverzug_selected_df$Wareneingang <- as.POSIXct(logistikverzug_selected_df$Wareneingang, "", "%d.%m.%Y")
# erstellen einer neuen Spalte mit der Lieferzeit in Tagen
logistikverzug_mutated_df <- mutate(logistikverzug_selected_df, Lieferzeit = as.double(Wareneingang - Produktionsdatum))
# Bestimmung der minimalen und maximalen Lieferzeit
min(logistikverzug_mutated_df$Lieferzeit)
max(logistikverzug_mutated_df$Lieferzeit)
summary(logistikverzug_mutated_df)
# Beginn der Shiny Applikation
library(shiny)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
)
),
# Erstellung des Main-Panels mit zwei verschiedenen Reitern
mainPanel(
tabsetPanel(
# Erstellung des ersten Reiters
tabPanel(
title = "Produktionsmenge",
div = "Produktionsmenge"
),
# Erstellung des zweiten Reiters
tabPanel(
title = "Karosserien in Auslieferung",
div("Karosserien in Auslieferung")
)
)
)
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
runApp('~/R/Vorlesung/VL_Shiny')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('~/R/Vorlesung/VL_Shiny/App nach Uebung 14.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
min(logistikverzug_mutated_df$Produktionsdatum)
max(logistikverzug_mutated_df$Wareneingang)
max(logistikverzug_mutated_df$Produktionsdatum)
min(logistikverzug_mutated_df$Wareneingang)
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
<<<<<<< HEAD
<<<<<<< HEAD
library(shiny); runApp('Case_Study_Allgemeine_Aufgaben.R')
filter(logistikverzug_mutated_df, logistikverzug_mutated_df$Produktionsdatum <= enddatum && logistikverzug_mutated_df$Produktionsdatum >= startdatum)
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
?as.Date
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
logistikverzug_mutated_df$Produktionsdatum < enddatum
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
?arrange
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
?validate
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
?ggplot
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
?discrete_scale
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
?format
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
?radioButtons
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
?sidebarPanel
?scale_fill_manual
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
?lubridate
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
?geom_histogram
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
?aes
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
month(2008-11-20) == "11"
month(2008-11-20) == 11
month("2008-11-20")
month(2008-11-20)
runApp('Case_Study_Allgemeine_Aufgaben.R')
month(as.Date(2008-11-20))
month(as.Date(2008-11-20, origin = "1900-01-20"))
month(as.Date(2008-11-20, origin = "1900-01-10"))
month(as.Date(2008-11-20, origin = "1970-01-01"))
?as.Date
month(as.Date(2008-11-20, origin = 1970-01-01))
month(as.Date(2008-11-20, origin = "2008-11-20))
month(as.Date(2008-11-20, origin = "2008-11-20))
month(as.Date(2008-11-20, origin = "2008-11-20))
month(as.Date(2008-11-20, origin = "2008-11-20))
month(as.Date(2008-11-20, origin = "%Y-%m-%d"))
month(as.Date(2008-11-20, origin = "%y-%m-%d"))
month(as.Date(2008-11-20, format = "%Y-%m-%d"))
month(as.Date(2008-11-20, origin = "%Y-%m-%d"))
month(as.Date.character(2008-11-20, origin = "%Y-%m-%d"))
month(as.Date.character(2008-11-20, origin = "%Y-%m-%d"))
month(as.Date.character(2008-11-20))
month(as.Date("2008-11-20"))
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
month(as.Date("2008-11-20"))
month(as.Date("2008-11-20") == 11)
month(as.Date("2008-11-20") == 11
month(as.Date("2008-11-20") == 11
month(as.Date("2008-11-20")) == 11
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
month(as.Date("2008-11-20")) == "11"
month(as.Date("2008-11-20")) == "11"
month(as.Date("2008-11-20")) == 11
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
library(shiny); runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
runApp('Case_Study_Allgemeine_Aufgaben.R')
=======
=======
>>>>>>> 1c844eeec07a8ea33c3637dd7fff8306ad384532
library(tidyverse)
# einlesen der Datei Komponente_K7
komponente_k7 <- read.csv2("Komponente_K7.csv", header = TRUE, stringsAsFactors = FALSE)
# einlesen der Datei Logistikverzug_K7
logistikverzug_k7 <- read.csv2("Logistikverzug_K7.csv", header = TRUE, stringsAsFactors = FALSE)
# zusammenfügen der beiden Datensätze
logistikverzug_combined_df <- left_join(komponente_k7, logistikverzug_k7, by = "IDNummer")
# bei doppelt vorkommenden Spalten benennt R die Spalte des ersten Datasets mit .x und die Spalte mit gleichem Namen des zweiten Datasets mit .y
# mit dem Befehl str() können wir einen Überblick über den gejointen Datensatz erhalten
# str(logistikverzug_combined_df)
# der so gejointe Datensatz enthält 11 Merkmale (Spalten) mit 306490 Zeilen (observations)
# löschen der doppelten Spalten
logistikverzug_selected_df <-  select(logistikverzug_combined_df, 1:6, 8)
# umbenennen der Spalten
column_names <- c( "X","IDNummer", "Produktionsdatum", "Herstellernummer","Werksnummer", "Fehlerhaft", "Wareneingang")
names(logistikverzug_selected_df) <- column_names
# umwandeln der Spalten "Produktionsdatum" und "Wareneingang" in POSIXct (Format für Datumsangaben)
logistikverzug_selected_df$Produktionsdatum <- as.POSIXct(logistikverzug_selected_df$Produktionsdatum, "", "%Y-%m-%d")
logistikverzug_selected_df$Wareneingang <- as.POSIXct(logistikverzug_selected_df$Wareneingang, "", "%d.%m.%Y")
# erstellen einer neuen Spalte mit der Lieferzeit in Tagen
logistikverzug_mutated_df <- mutate(logistikverzug_selected_df, Lieferzeit = as.double(Wareneingang - Produktionsdatum))
# Bestimmung der minimalen und maximalen Lieferzeit
min(logistikverzug_mutated_df$Lieferzeit)
max(logistikverzug_mutated_df$Lieferzeit)
# AUfteilung der Spalte "IDNummer" in mehrere Spalten mit int Datentypen (möglicherweise nicht nötig)
logistikverzug_separated_df <- separate(logistikverzug_mutated_df, col=IDNummer, into = c("ID_1", "ID_2", "ID_3", "ID_4"), sep = "-")
logistikverzug_transformed_df <- transform(logistikverzug_separated_df, ID_2 = as.numeric(ID_2),ID_3 = as.numeric(ID_3), ID_4 = as.numeric(ID_4))
View(logistikverzug_mutated_df)
?unique
?distinct
distinct(logistikverzug_mutated_df$Lieferzeit)
class(logistikverzug_mutated_df$Lieferzeit)
unique(logistikverzug_mutated_df$Lieferzeit)
? round
logistikverzug_mutated_df <- mutate(logistikverzug_selected_df, Lieferzeit = round(as.double(Wareneingang - Produktionsdatum), digits = 0))
unique(logistikverzug_mutated_df$Lieferzeit)
ggplot(dat, aes(x=logistikverzug_mutated_df)) +
geom_density
ggplot(logistikverzug_mutated_df, aes(x=Lieferzeit)) +
geom_density()
ggplot(logistikverzug_mutated_df, aes(x=Lieferzeit)) +
geom_freqpoly()
liferzeiten_unique <- unique(logistikverzug_mutated_df$Lieferzeit)
nrow(liferzeiten_unique)
ncol(liferzeiten_unique)
liferzeiten_unique
distinct(liferzeiten_unique)
?ncol
NROW(liferzeiten_unique)
ggplot(logistikverzug_transformed_df, aes(x = Lieferzeit)) +
geom_histogram(binwidth = 1, aes(y = ..density..))
lieferzeiten_unique <- unique(logistikverzug_mutated_df$Lieferzeit)
n_lieferzeiten<- NROW(lieferzeiten_unique)
ggplot(logistikverzug_transformed_df, aes(x = Lieferzeit)) +
geom_histogram(binwidth = 1, aes(y = ..density..), bins = n_lieferzeiten)
?poisson
plot(density(logistikverzug_mutated_df$Lieferzeit),main="Density estimate of data")
logistikverzug_mutated_df <- mutate(logistikverzug_selected_df, Lieferzeit = as.double(Wareneingang - Produktionsdatum, digits = 0))
plot(density(logistikverzug_mutated_df$Lieferzeit),main="Density estimate of data")
ggplot(logistikverzug_transformed_df, aes(x = Lieferzeit)) +
geom_histogram(binwidth = 1, aes(y = ..density..), bins = n_lieferzeiten)
?fitdistr
<<<<<<< HEAD
>>>>>>> 1c844eeec07a8ea33c3637dd7fff8306ad384532
=======
>>>>>>> 1c844eeec07a8ea33c3637dd7fff8306ad384532
=======
# # Beginn der Shiny Applikation
# library(shiny)
#
# ui <- fluidPage(
# # Ãberschrift hinzufÃ¼gen
#   headerPanel(title = "Allgemeine Aufgaben"),
#
# # Erstellung des SidebarLayouts
#   sidebarLayout(
# # Erstellung eines SidebarPanels
#     sidebarPanel(
# # Implementierung eines Blocks zur Zeitraumwahl
#       dateRangeInput(
#         inputId = "date_range",
#         label = "Zeitraum",
#         min = min(logistikverzug_mutated_df$Produktionsdatum), # frÃ¼hestes auswÃ¤hlbares Datum
#         max = max(logistikverzug_mutated_df$Wareneingang), # spÃ¤testes auswÃ¤hlbares Datum
#         start = min(logistikverzug_mutated_df$Produktionsdatum), # vorausgewÃ¤hltes Startdatum
#         end = max(logistikverzug_mutated_df$Wareneingang) # vorausgewÃ¤hltes Enddatum
#       )
#     ),
#
# # Erstellung des Main-Panels mit zwei verschiedenen Reitern
#     mainPanel(
#       tabsetPanel(
# # Erstellung des ersten Reiters
#         tabPanel(
#           title = "Produktionsmenge",
#           # div("Balkendiagramm: Produktionsmenge") # Platzhalter fÃ¼r Diagramm
#           plotOutput(
#             # An dieser Stelle wird output$plot dargestellt
#             outputId = "plot_produktionsmenge"
#           )
#         ),
# # Erstellung des zweiten Reiters
#         tabPanel(
#           title = "Karosserien in Auslieferung",
#           div("Balkendiagramm: Karosserien in Auslieferung") # Platzhalter fÃ¼r Diagramm
#         )
#       )
#     )
#   )
# )
#
# server <- function(session, input, output) {
#
#   zeitraum_df <-  reactive({
#     startdatum <- input$date_range[[1]]
#     enddatum <- input$date_range[[2]]
#     filter(logistikverzug_mutated_df, logistikverzug_mutated_df$Produktionsdatum <= enddatum && logistikverzug_mutated_df$Produktionsdatum >= startdatum)
#   })
#
# # Funktion zur Erzeugung des Diagramms im ersten Reiter
#   output$plot_produktionsmenge <- renderPlot({
#     ggplot(zeitraum_df(), aes(x = Produktionsdatum, y = Lieferzeit, col = as.factor(Werksnummer))) +
#         geom_point(alpha = 0.2)    # nicht finales Diagramm
#   })
#
# }
#
# shinyApp(ui = ui, server = server)
>>>>>>> 1c844eeec07a8ea33c3637dd7fff8306ad384532
load("D:/GitHub/QW_Case_Study/.RData")
einzelteil_df_combined_transformed <- transform(einzelteil_df_combined_splitted, a = as.numeric(a), b = as.numeric(b),c = as.numeric(c),d = as.numeric(d))
clc
clear
