1+1
View(iris)
x <- c(1,3,5,7)
y <- c(2,4,6,8)
my_function <- function(x) {
result <- mean(x)
character <- as.character(result)
}
z <- x*y
my_function(z)
install.packages("ggplot2")
library("colorspace", lib.loc="~/R/win-library/3.4")
detach("package:colorspace", unload=TRUE)
library("ggplot2", lib.loc="~/R/win-library/3.4")
detach("package:ggplot2", unload=TRUE)
library("ggplot2", lib.loc="~/R/win-library/3.4")
detach("package:ggplot2", unload=TRUE)
# Plot wt vs. Mpg
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point() +
geom_smooth()
# Plot wt vs. Mpg
ggplot2(mtcars, aes(x = wt, y = mpg)) +
geom_point() +
geom_smooth()
# Plot wt vs. Mpg
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point() +
geom_smooth()
# Plot wt vs. Mpg
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point() +
geom_smooth()
library(ggplot2)
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point() +
geom_smooth()
getwd()
if (!require(tidyverse)) {
install.packages("tidyverse")
require(tidyverse)
}
if (!require(jsonlite)) {
install.packages("jsonlite")
require(jsonlite)
}
FG_QW <- '[{"LV":"IDA", "LP": 6, "Ansprechpartner":["Hensel", "Trevino"]}, {"LV":"ZRB", "LP": 6, "Ansprechpartner":"Pasch"}, {"LV":"DAP", "LP": 6, "Ansprechpartner":["Hensel", "Seiffert"]}]'
FG_QW_R <- fromJSON(FG_QW)
glimpse(FG_QW_R)
# Führe den Code aus
?toJSON
# Konvertiere FG_QW_R mit toJSON() nach JSON: FG_QW_JSON
FG_QW_JSON <- toJSON(FG_QW_R)
# Schau Dir das JSON-Objekt an:
str(FG_QW_JSON)
# Konvertiere FG_QW_R mit toJSON() nach JSON: FG_QW_JSON
FG_QW_JSON <- toJSON(FG_QW_R)
# Schau Dir das JSON-Objekt an:
glimpse(FG_QW_JSON)
# Mithilfe von prettify() und minify() kannst du die Darstellung von JSON-Objekten in R verändern
# Wende prettify() und minify() auf FG_QW_JSON an und betrachte die Unterschiede:
prettify(FG_QW_JSON)
minify(FG_QW_JSON)
# Installiere und lade das Package haven:
if (!require(haven)) {
install.packages("haven")
require(haven)
}
# Importiere "braking.sav" mithilfe von read_sav(): braking
braking <- read_sav()
# Installiere und lade das Package haven:
if (!require(haven)) {
install.packages("haven")
require(haven)
}
# Importiere "braking.sav" mithilfe von read_sav(): braking
braking
# Installiere und lade das Package haven:
if (!require(haven)) {
install.packages("haven")
require(haven)
}
# Importiere "braking.sav" mithilfe von read_sav(): braking
# Betrachte die Spaltennamen von braking:
?read_sav
# Installiere und lade das Package haven:
if (!require(haven)) {
install.packages("haven")
require(haven)
}
# Importiere "braking.sav" mithilfe von read_sav(): braking
braking <- read_sav("braking.sav")
# Betrachte die Spaltennamen von braking:
braking
?colnames
# Ändere die Spaltennamen mit colnames() zu c("dry_pavement", "wet_pavement"):
colnames(braking, c("dry_pavement", "wet_pavement"))
# Installiere und lade das Package haven:
if (!require(haven)) {
install.packages("haven")
require(haven)
}
# Importiere "braking.sav" mithilfe von read_sav(): braking
braking <- read_sav("braking.sav")
# Betrachte die Spaltennamen von braking:
colnames(braking)
# Ändere die Spaltennamen mit colnames() zu c("dry_pavement", "wet_pavement"):
colnames(braking) <- c("dry_pavement", "wet_pavement"))
# Ändere die Spaltennamen mit colnames() zu c("dry_pavement", "wet_pavement"):
colnames(braking) <- c("dry_pavement", "wet_pavement")
# Schau Dir mit summary() eine Zusammenfassung von braking an. Achte darauf, ob Du die Spaltennamen richtig gesetzt
# hast:
summary(braking)
# Optional: Uns interessiert, wie das Verhältnis zwischen Bremsweg bei feuchtem und trockenem Untergrund verteilt
# ist.
# Berechne das Verhältnis, indem Du den Quotient aus braking$wet_pavement und braking$dry_pavement bildest:
# brake_verh
brake_verh <- brakin$wet_pavement / braking$dry_pavement
# Optional: Uns interessiert, wie das Verhältnis zwischen Bremsweg bei feuchtem und trockenem Untergrund verteilt
# ist.
# Berechne das Verhältnis, indem Du den Quotient aus braking$wet_pavement und braking$dry_pavement bildest:
# brake_verh
brake_verh <- braking$wet_pavement / braking$dry_pavement
# Mithilfe eines Boxplots können Lage und Streuung der Verteilung einer Variable übersichtlich dargestellt werden.
# Erstelle einen Boxplot von brake_verh mithilfe von boxplot():
# Optional: Uns interessiert, wie das Verhältnis zwischen Bremsweg bei feuchtem und trockenem Untergrund verteilt
# ist.
# Berechne das Verhältnis, indem Du den Quotient aus braking$wet_pavement und braking$dry_pavement bildest:
# brake_verh
brake_verh <- braking$wet_pavement / braking$dry_pavement
# Mithilfe eines Boxplots können Lage und Streuung der Verteilung einer Variable übersichtlich dargestellt werden.
# Erstelle einen Boxplot von brake_verh mithilfe von boxplot():
boxplot(brake_verh)
head(weather)
weather <- read.csv("weather_revised.txt")
head(weather)
weather <- read.cvs2("weather_revised.txt")
weather <- read.csv2("weather_revised.txt")
getwd()
weather <- read.csv2(getwd("weather_revised.txt"))
head(weather)
weather <- read.csv2("C:/Users/Aron/Documents/R/Vorlesung/VL5/weather_revised.txt")
weather <- read.csv("C:/Users/Aron/Documents/R/Vorlesung/VL5/weather_revised.txt", sep ="I")
weather <- read.csv("C:\\Users\\Aron\\Documents\\R\\Vorlesung\\VL5\\weather_revised.txt", sep ="I")
head(weather)
weather <- read.csv("C:\\Users\\Aron\\Documents\\R\\Vorlesung\\VL5\\weather_revised.txt", sep ="I", stringsAsFactors = FALSE)
head(weather)
weather <- tbl_df(read.csv("C:\\Users\\Aron\\Documents\\R\\Vorlesung\\VL5\\weather_revised.txt", sep ="I", stringsAsFactors = FALSE))
head(weather)
library(tidyverse)
weather <- tbl_df(read.csv("C:\\Users\\Aron\\Documents\\R\\Vorlesung\\VL5\\weather_revised.txt", sep ="I", stringsAsFactors = FALSE))
head(weather)
library(tidyverse)
weather <- tbl_df(read.csv("C:\\Users\\Aron\\Documents\\R\\Vorlesung\\VL5\\weather_revised.txt", sep =";", stringsAsFactors = FALSE, header = FALSE))
head(weather)
weather$V1 <- sub("M N", "MIN", weather$V1)
head(weather)
weather$V1[1] <- "MX000017004195504TMAX"
head(weather)
weather$V1[1] <- 'MX000017004195504TMAX'
head(weather)
weather <- data.frame(lapply(weather, trimws), stringsAsFactors = FALSE)
weather1 <- weather %>%
+ separate(V1, c('Stations_ID', 'Jahr' ),11) %>%
+ separate(Jahr, c('Year', 'Month'),4) %>%
+ separate(Month, c('Month','Element'), 2) %>%
+ separate(Element, c('Element', 'Missing'), sep = '-')
weather1 <- weather %>%
+ separate(V1, c('Stations_ID', 'Jahr' ),11) %>%
+ separate(Jahr, c('Year', 'Month'),4) %>%
+ separate(Month, c('Month','Element'), 2) %>%
+ separate(Element, c('Element', 'Missing'), sep = '-')
weather1 <- weather %>%
separate(V1, c('Stations_ID', 'Jahr' ),11) %>%
separate(Jahr, c('Year', 'Month'),4) %>%
separate(Month, c('Month','Element'), 2) %>%
separate(Element, c('Element', 'Missing'), sep = '-')
head(weather1)
# Installieren und laden von tidyverse
if (!require(tidyverse)){
install.packages("tidyverse")
require(tidyverse)
}
getwd
getwd()
# Installieren und laden von readxl:
if (!require(readxl)){
install.packages("readxl")
require(readxl)
}
# Import von "Bahnhoefe_untidy.xlsx" mit read_excel(): bahnhoefe_untidy
bahnhoefe_untidy <- read_excel("C:\\Users\\Aron\\Documents\\R\\Vorlesung\\VL5\\Bahnhoefe_untidy.xlsx")
# Betrachte die ersten 10 Zeilen von bahnhoefe_untidy mit head():
head(bahnhoefe_untidy)
?unite
# Verbinde die Spalten Bundesland_1 und Bundesland_2 zur neuen Spalte Bundesland. Achte darauf, dass die Werte in der
# neuen Spalte durch einen Bindestrich getrennt sind, indem du das Argument sep = "-" setzt.
bahnhoefe_untidy_01 <- unite(bahnhoefe_untidy, "Bundesland",Bundesland1, Bundesland2, sep = "-")
# Verbinde die Spalten Bundesland_1 und Bundesland_2 zur neuen Spalte Bundesland. Achte darauf, dass die Werte in der
# neuen Spalte durch einen Bindestrich getrennt sind, indem du das Argument sep = "-" setzt.
bahnhoefe_untidy_01 <- unite(bahnhoefe_untidy, "Bundesland",bahnhoefe_untidy$Bundesland1, bahnhoefe_untidy$Bundesland2, sep = "-")
# Verbinde die Spalten Bundesland_1 und Bundesland_2 zur neuen Spalte Bundesland. Achte darauf, dass die Werte in der
# neuen Spalte durch einen Bindestrich getrennt sind, indem du das Argument sep = "-" setzt.
bahnhoefe_untidy_01 <- unite(bahnhoefe_untidy, "Bundesland", "Bundesland1", "Bundesland2", sep = "-")
# Verbinde die Spalten Bundesland_1 und Bundesland_2 zur neuen Spalte Bundesland. Achte darauf, dass die Werte in der
# neuen Spalte durch einen Bindestrich getrennt sind, indem du das Argument sep = "-" setzt.
bahnhoefe_untidy_01 <- unite(bahnhoefe_untidy, "Bundesland", Bundesland_1, Bundesland_2, sep = "-")
# Wähle aus bahnhoefe_untidy_01 mithilfe des '$'-Operators die Spalte Adresse aus und betrachte die ersten 20 Zeilen:
glimpsee(bahnhoefe_untidy_01$Adresse, 20)
# Wähle aus bahnhoefe_untidy_01 mithilfe des '$'-Operators die Spalte Adresse aus und betrachte die ersten 20 Zeilen:
glimpsee(bahnhoefe_untidy_01$Adresse)
# Wähle aus bahnhoefe_untidy_01 mithilfe des '$'-Operators die Spalte Adresse aus und betrachte die ersten 20 Zeilen:
glimpse(bahnhoefe_untidy_01$Adresse)
# Welcher Grundsatz von Clean Data wird in der Spalte Adresse verletzt?
# Wähle aus bahnhoefe_untidy_01 mithilfe des '$'-Operators die Spalte Adresse aus und betrachte die ersten 20 Zeilen:
head(bahnhoefe_untidy_01$Adresse, 20)
# Welcher Grundsatz von Clean Data wird in der Spalte Adresse verletzt?
?seperate
?seperate()
?separate
# Verwende separate(), um den Inhalt der Spalte Adresse auf die Spalten Strasse_Hausnummer, Postleitzahl und Ort
# aufzuteilen.
bahnhoefe_untidy_02 <- seperate(bahnhoefe_untidy_01, Adresse, sep = ";")
# Verwende separate(), um den Inhalt der Spalte Adresse auf die Spalten Strasse_Hausnummer, Postleitzahl und Ort
# aufzuteilen.
bahnhoefe_untidy_02 <- separate(bahnhoefe_untidy_01, Adresse, sep = ";")
# Verwende separate(), um den Inhalt der Spalte Adresse auf die Spalten Strasse_Hausnummer, Postleitzahl und Ort
# aufzuteilen.
bahnhoefe_untidy_02 <- separate(bahnhoefe_untidy_01, Adresse, into = c["Strasse_Hausnummer", "Postleitzahl", "Ort"],  sep = ";")
# Verwende separate(), um den Inhalt der Spalte Adresse auf die Spalten Strasse_Hausnummer, Postleitzahl und Ort
# aufzuteilen.
bahnhoefe_untidy_02 <- separate(bahnhoefe_untidy_01, Adresse, into = c("Strasse_Hausnummer", "Postleitzahl", "Ort"),  sep = ";")
# Betrachte dein Werk mit head():
head(bahnhoefe_untidy_02)
# Verwende separate(), um den Inhalt der Spalte Adresse auf die Spalten Strasse_Hausnummer, Postleitzahl und Ort
# aufzuteilen.
bahnhoefe_untidy_02 <- separate(bahnhoefe_untidy_01, Adresse, into = c("Strasse_Hausnummer", "Postleitzahl", "Ort"),  sep = ";")
# Betrachte dein Werk mit head():
head(bahnhoefe_untidy_02$Adresse)
# Betrachte dein Werk mit head():
head(bahnhoefe_untidy_02)
getwd()
# Betrachte die ersten 10 Zeilen von bahnhoefe_untidy mit head():
head(bahnhoefe_untidy, n = 10)
# Verbinde die Spalten Bundesland_1 und Bundesland_2 zur neuen Spalte Bundesland. Achte darauf, dass die Werte in der
# neuen Spalte durch einen Bindestrich getrennt sind, indem du das Argument sep = "-" setzt.
bahnhoefe_untidy_01 <- unite(bahnhoefe_untidy, Bundesland, Bundesland_1, Bundesland_2, sep = "-")
library(shiny); runApp('R/Vorlesung/VL14/Übung/app_aufgabe.R')
runApp('~/R/Vorlesung/VL14')
runApp('R/Vorlesung/VL14')
library(shiny); runApp('R/Vorlesung/VL15/App nach Uebung 14.R')
clear
clc
setwd("~/GitHub/QW_Case_Study")
library(tidyverse)
?read.csv
komponente_k7 <- read.csv2("Komponente_K7.csv", header = TRUE)
head(komponente_k7)
logistikverzug_k7 <- read.csv2("Logistikverzug_K7.csv", header = TRUE)
head(logistikverzug_k7)
summary(komponente_k7)
glimpse(komponente_k7)
?POSIXct
tail(komponente_k7)
tail(logistikverzug_k7)
logistikverzug_combined_df <- full_join(komponente_k7, logistikverzug_k7, by = "IDNummer")
summary(logistikverzug_combined_df)
head(logistikverzug_combined_df)
logistikverzug_combined_df <- left_join(komponente_k7, logistikverzug_k7, by = "IDNummer")
summary(logistikverzug_combined_df)
head(logistikverzug_combined_df)
glimpse(logistikverzug_combined_df)
logistikverzug_combined_df <- inner_join(komponente_k7, logistikverzug_k7, by = "IDNummer")
glimpse(logistikverzug_combined_df)
view(logistikverzug_combined_df)
View(logistikverzug_combined_df)
logistikverzug_combined_df$Herstellernummer.y <- NULL
logistikverzug_combined_df$Werksnummer.y <- NULL
logistikverzug_combined_df$Fehlerhaft.y <- NULL
logistikverzug_combined_df$X.y <- NULL
head(logistikverzug_combined_df)
logistikverzug_combined_df_renamed <- rename(logistikverzug_combined_df, "X.x" = "X", "Herstellernummer.x" = "Herstellernummer",
"Werksnummer.x" = "Werksnummer", "Fehlerhaft.x" = "Fehlerhaft")
logistikverzug_combined_df_renamed <- rename(logistikverzug_combined_df, "X.x" = X, "Herstellernummer.x" = "Herstellernummer",
"Werksnummer.x" = "Werksnummer", "Fehlerhaft.x" = "Fehlerhaft")
logistikverzug_combined_df_renamed <- rename(logistikverzug_combined_df, c["X.x" = "X", "Herstellernummer.x" = "Herstellernummer",
"Werksnummer.x" = "Werksnummer", "Fehlerhaft.x" = "Fehlerhaft"])
logistikverzug_combined_df_renamed <- rename(logistikverzug_combined_df, c["X.x" = "X", "IDNummer" = "IDNummer", "Produktionsdatum" = "Produktionsdatum","Herstellernummer.x" = "Herstellernummer",
"Werksnummer.x" = "Werksnummer", "Fehlerhaft.x" = "Fehlerhaft", "Wareneingang" = "Wareneingang"])
head(logistikverzug_combined_df_renamed)
logistikverzug_combined_df_renamed <- rename(logistikverzug_combined_df, c("X.x" = "X", "IDNummer" = "IDNummer", "Produktionsdatum" = "Produktionsdatum","Herstellernummer.x" = "Herstellernummer",
"Werksnummer.x" = "Werksnummer", "Fehlerhaft.x" = "Fehlerhaft", "Wareneingang" = "Wareneingang"))
logistikverzug_combined_df_renamed <- rename(logistikverzug_combined_df, c( "X","IDNummer", "Produktionsdatum", "Herstellernummer",
"Werksnummer", "Fehlerhaft", "Wareneingang"))
head(logistikverzug_combined_df_renamed)
head(logistikverzug_combined_df)
?rename
??rename
library(plyr)
# einlesen der Datei Komponente_K7
komponente_k7 <- read.csv2("Komponente_K7.csv", header = TRUE)
# einlesen der Datei Logistikverzug_K7
logistikverzug_k7 <- read.csv2("Logistikverzug_K7.csv", header = TRUE)
# zusammenfügen der beiden Datensätze
logistikverzug_combined_df <- inner_join(komponente_k7, logistikverzug_k7, by = "IDNummer")
# löschen der doppelten Spalten
logistikverzug_combined_df$Herstellernummer.y <- NULL
logistikverzug_combined_df$Werksnummer.y <- NULL
logistikverzug_combined_df$Fehlerhaft.y <- NULL
logistikverzug_combined_df$X.y <- NULL
# umbenennen der Spalten
logistikverzug_combined_df_renamed <- rename(logistikverzug_combined_df, c( "X","IDNummer", "Produktionsdatum", "Herstellernummer",
"Werksnummer", "Fehlerhaft", "Wareneingang"))
logistikverzug_combined_df <- left_join(komponente_k7, logistikverzug_k7, by = "IDNummer")
library(tidyverse)
library(tidyverse)
# einlesen der Datei Komponente_K7
komponente_k7 <- read.csv2("Komponente_K7.csv", header = TRUE)
# einlesen der Datei Logistikverzug_K7
logistikverzug_k7 <- read.csv2("Logistikverzug_K7.csv", header = TRUE)
# zusammenfügen der beiden Datensätze
logistikverzug_combined_df <- left_join(komponente_k7, logistikverzug_k7, by = "IDNummer")
# löschen der doppelten Spalten
logistikverzug_combined_df$Herstellernummer.y <- NULL
logistikverzug_combined_df$Werksnummer.y <- NULL
logistikverzug_combined_df$Fehlerhaft.y <- NULL
logistikverzug_combined_df$X.y <- NULL
# umbenennen der Spalten
logistikverzug_combined_df_renamed <- rename(logistikverzug_combined_df, c( "X","IDNummer", "Produktionsdatum", "Herstellernummer",
"Werksnummer", "Fehlerhaft", "Wareneingang"))
head(logistikverzug_combined_df)
column_names <- c( "X","IDNummer", "Produktionsdatum", "Herstellernummer","Werksnummer", "Fehlerhaft", "Wareneingang")
names(logistikverzug_combined_df) <- column_names
head(logistikverzug_combined_df)
glimpse(logistikverzug_combined_df)
?as.POSIXct
?read.csv2
# einlesen der Datei Komponente_K7
komponente_k7 <- read.csv2("Komponente_K7.csv", header = TRUE, stringsAsFactors = FALSE)
# einlesen der Datei Logistikverzug_K7
logistikverzug_k7 <- read.csv2("Logistikverzug_K7.csv", header = TRUE, stringsAsFactors = FALSE)
# zusammenfügen der beiden Datensätze
logistikverzug_combined_df <- left_join(komponente_k7, logistikverzug_k7, by = "IDNummer")
# löschen der doppelten Spalten
logistikverzug_combined_df$Herstellernummer.y <- NULL
logistikverzug_combined_df$Werksnummer.y <- NULL
logistikverzug_combined_df$Fehlerhaft.y <- NULL
logistikverzug_combined_df$X.y <- NULL
# umbenennen der Spalten
column_names <- c( "X","IDNummer", "Produktionsdatum", "Herstellernummer","Werksnummer", "Fehlerhaft", "Wareneingang")
names(logistikverzug_combined_df) <- column_names
# umwandeln der Spalten "Produktionsdatum" und "Wareneingang" in POSIXct (Format für Datumsangaben)
logistikverzug_combined_df_1 <- as.POSIXct(logistikverzug_combined_df$Produktionsdatum
head(logistikverzug_combined_df)
head(logistikverzug_combined_df)
glimpse(logistikverzug_combined_df)
# umwandeln der Spalten "Produktionsdatum" und "Wareneingang" in POSIXct (Format für Datumsangaben)
logistikverzug_combined_df <- as.POSIXct(logistikverzug_combined_df$Produktionsdatum, "%Y-%m-%d")
glimpse(logistikverzug_combined_df)
library(tidyverse)
# einlesen der Datei Komponente_K7
komponente_k7 <- read.csv2("Komponente_K7.csv", header = TRUE, stringsAsFactors = FALSE)
# einlesen der Datei Logistikverzug_K7
logistikverzug_k7 <- read.csv2("Logistikverzug_K7.csv", header = TRUE, stringsAsFactors = FALSE)
# zusammenfügen der beiden Datensätze
logistikverzug_combined_df <- left_join(komponente_k7, logistikverzug_k7, by = "IDNummer")
# löschen der doppelten Spalten
#logistikverzug_combined_df$Herstellernummer.y <- NULL
#logistikverzug_combined_df$Werksnummer.y <- NULL
#logistikverzug_combined_df$Fehlerhaft.y <- NULL
#logistikverzug_combined_df$X.y <- NULL
logistikverzug_combined_df_1 <-  select(logistikverzug_combined_df, 1:6, 12)
# umbenennen der Spalten
column_names <- c( "X","IDNummer", "Produktionsdatum", "Herstellernummer","Werksnummer", "Fehlerhaft", "Wareneingang")
names(logistikverzug_combined_df_1) <- column_names
head(logistikverzug_combined_df)
logistikverzug_combined_df_1 <-  select(logistikverzug_combined_df, 1:6, 8)
head(logistikverzug_combined_df_1)
# umbenennen der Spalten
column_names <- c( "X","IDNummer", "Produktionsdatum", "Herstellernummer","Werksnummer", "Fehlerhaft", "Wareneingang")
names(logistikverzug_combined_df_1) <- column_names
head(logistikverzug_combined_df_1)
glimpse(logistikverzug_combined_df_1)
logistikverzug_combined_df_2 <- as.POSIXct(logistikverzug_combined_df_1$Produktionsdatum, "", "%Y-%m-%d")
glimpse(logistikverzug_combined_df_2)
logistikverzug_combined_df_1 <- as.POSIXct(logistikverzug_combined_df_1$Produktionsdatum, "", "%Y-%m-%d")
glimpse(logistikverzug_combined_df_1)
library(tidyverse)
# einlesen der Datei Komponente_K7
komponente_k7 <- read.csv2("Komponente_K7.csv", header = TRUE, stringsAsFactors = FALSE)
# einlesen der Datei Logistikverzug_K7
logistikverzug_k7 <- read.csv2("Logistikverzug_K7.csv", header = TRUE, stringsAsFactors = FALSE)
# zusammenfügen der beiden Datensätze
logistikverzug_combined_df <- left_join(komponente_k7, logistikverzug_k7, by = "IDNummer")
# löschen der doppelten Spalten
logistikverzug_combined_df_1 <-  select(logistikverzug_combined_df, 1:6, 8)
# umbenennen der Spalten
column_names <- c( "X","IDNummer", "Produktionsdatum", "Herstellernummer","Werksnummer", "Fehlerhaft", "Wareneingang")
names(logistikverzug_combined_df_1) <- column_names
# umwandeln der Spalten "Produktionsdatum" und "Wareneingang" in POSIXct (Format für Datumsangaben)
as.POSIXct(logistikverzug_combined_df_1$Produktionsdatum, "", "%Y-%m-%d")
as.POSIXct(logistikverzug_combined_df_1$Wareneingang, "", "%d.%m.%Y")
glimpse(logistikverzug_combined_df_1)
logistikverzug_combined_df_1$Produktionsdatum <- as.POSIXct(logistikverzug_combined_df_1$Produktionsdatum, "", "%Y-%m-%d")
glimpse(logistikverzug_combined_df_1)
logistikverzug_combined_df_1$Wareneingang <- as.POSIXct(logistikverzug_combined_df_1$Wareneingang, "", "%d.%m.%Y")
glimpse(logistikverzug_combined_df_1)
head(logistikverzug_combined_df_1)
logistikverzug_combined_df_1$Wareneingang (1)
logistikverzug_combined_df_1$Wareneingang [1]
logistikverzug_combined_df_1$Wareneingang [1] - logistikverzug_combined_df_1$Produktionsdatum[1]
?summarise
# erstellen einer neuen Spalte mit den Werten des Logistikverzugs
logistikverzug_combined_df_2 <- mutate(logistikverzug_combined_df_1, Logistikverzug = Wareneingang - Produktionsdatum)
head(logistikverzug_combined_df_2)
glimpse(logistikverzug_combined_df_2)
# erstellen einer neuen Spalte mit den Werten des Logistikverzugs in Tagen
logistikverzug_combined_df_2 <- mutate(logistikverzug_combined_df_1, Logistikverzug = as.numeric(Wareneingang) - as.numeric(Produktionsdatum))
glimpse(logistikverzug_combined_df_2)
as.numeric(logistikverzug_combined_df_1$Wareneingang) - as.numeric(logistikverzug_combined_df_1$Produktionsdatum)
logistikverzug_combined_df_2 <- mutate(logistikverzug_combined_df_1, Logistikverzug = Wareneingang - Produktionsdatum)
glimpse(logistikverzug_combined_df_2)
head(logistikverzug_combined_df_2)
as.numeric(logistikverzug_combined_df_1$Produktionsdatum[1])
as.numeric(logistikverzug_combined_df_1$Wareneingang[1])
class(logistikverzug_combined_df_1$Produktionsdatum)
class(logistikverzug_combined_df_2$Logistikverzug)
?difftime
# erstellen einer neuen Spalte mit den Werten des Logistikverzugs in Tagen
logistikverzug_combined_df_2 <- mutate(logistikverzug_combined_df_1, Logistikverzug = as.double(Wareneingang - Produktionsdatum))
head(logistikverzug_combined_df_2)
glimpse(logistikverzug_combined_df_2)
View(logistikverzug_combined_df_2)
summary(logistikverzug_combined_df_2)
library(tidyverse)
# einlesen der Datei Komponente_K7
komponente_k7 <- read.csv2("Komponente_K7.csv", header = TRUE, stringsAsFactors = FALSE)
# einlesen der Datei Logistikverzug_K7
logistikverzug_k7 <- read.csv2("Logistikverzug_K7.csv", header = TRUE, stringsAsFactors = FALSE)
# zusammenfügen der beiden Datensätze
logistikverzug_combined_df <- left_join(komponente_k7, logistikverzug_k7, by = "IDNummer")
# löschen der doppelten Spalten
logistikverzug_selected_df <-  select(logistikverzug_combined_df, 1:6, 8)
# umbenennen der Spalten
column_names <- c( "X","IDNummer", "Produktionsdatum", "Herstellernummer","Werksnummer", "Fehlerhaft", "Wareneingang")
names(logistikverzug_selected_df) <- column_names
# umwandeln der Spalten "Produktionsdatum" und "Wareneingang" in POSIXct (Format für Datumsangaben)
logistikverzug_selected_df$Produktionsdatum <- as.POSIXct(logistikverzug_selected_df$Produktionsdatum, "", "%Y-%m-%d")
logistikverzug_selected_df$Wareneingang <- as.POSIXct(logistikverzug_selected_df$Wareneingang, "", "%d.%m.%Y")
# erstellen einer neuen Spalte mit den Werten des Logistikverzugs in Tagen
logistikverzug_mutated_df <- mutate(logistikverzug_selected_df, Logistikverzug = as.double(Wareneingang - Produktionsdatum))
# der minimale und maximale Logistikverzug lässt sich aus der summary für den Datensatz ablesen
summary(logistikverzug_mutated_df)
View(logistikverzug_mutated_df)
tail(logistikverzug_mutated_df)
hist(logistikverzug_mutated_df$Logistikverzug)
